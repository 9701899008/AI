from collections import deque

def water_jug_problem(jug1, jug2, target):
    visited = set()
    queue = deque([(0, 0)])  # Start with both jugs empty
    steps = 0

    while queue:
        for _ in range(len(queue)):
            x, y = queue.popleft()

            # Check if we have reached the target
            if x == target or y == target or x + y == target:
                return steps

            # Mark the state as visited
            if (x, y) in visited:
                continue
            visited.add((x, y))

            # Possible states to explore
            queue.append((jug1, y))  # Fill jug1
            queue.append((x, jug2))  # Fill jug2
            queue.append((0, y))      # Empty jug1
            queue.append((x, 0))      # Empty jug2
            queue.append((min(x + y, jug1), max(0, y - (jug1 - x))))  # Pour jug2 into jug1
            queue.append((max(0, x - (jug2 - y)), min(x + y, jug2)))  # Pour jug1 into jug2

        steps += 1

    return -1  # Return -1 if the target cannot be measured

# Example usage
jug1_capacity = 4
jug2_capacity = 3
target_amount = 2
result = water_jug_problem(jug1_capacity, jug2_capacity, target_amount)
print(f"Minimum steps to measure {target_amount} liters: {result}")
